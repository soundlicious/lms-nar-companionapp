CREATE TABLE IF NOT EXISTS armor_translation(
    id INTEGER PRIMARY KEY,
    armor_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    description TEXT,
    traits TEXT,
    updated TEXT NOT NULL,
    language_code TEXT NOT NULL,
    FOREIGN KEY(armor_id) REFERENCES armor(id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS armor(
    id INTEGER PRIMARY KEY,
    card_ref TEXT NOT NULL,
    slot_weight INTEGER NOT NULL,
    slot_type TEXT NOT NULL,
    reward_id INTEGER,
    updated TEXT NOT NULL,
    FOREIGN KEY(reward_id) REFERENCES reward(id) ON UPDATE CASCADE ON DELETE SET NULL,
    FOREIGN KEY(card_ref) REFERENCES card(ref) ON UPDATE CASCADE ON DELETE CASCADE
);

-- SELECTS

-- Select all armor with their translations by joining armor and armor_translation tables
selectAllArmorsWithoutTranslation:
SELECT * FROM armor;

selectAllArmorPaginated:
SELECT * FROM armor WHERE updated > :date LIMIT :limit OFFSET :offset;

selectAllArmorTranslationPaginated:
SELECT * FROM armor_translation WHERE updated > :date LIMIT :limit OFFSET :offset;

selectAllArmorCards:
SELECT a.id, a.card_ref, a.reward_id, a.slot_type, a.slot_weight,
       COALESCE(at.name, at_default.name) AS translated_name, COALESCE(at.description, at_default.description) AS translated_description, COALESCE(at.traits, at_default.traits) AS translated_traits
FROM armor a
LEFT JOIN armor_translation at ON a.id = at.armor_id AND at.language_code = ?
LEFT JOIN armor_translation at_default ON a.id = at_default.armor_id AND at_default.language_code = 'en_US';

selectAllArmorCardPaginated:
SELECT a.id, a.card_ref, a.reward_id, a.slot_type, a.slot_weight,
       COALESCE(at.name, at_default.name) AS translated_name, COALESCE(at.description, at_default.description) AS translated_description, COALESCE(at.traits, at_default.traits) AS translated_traits
FROM armor a
LEFT JOIN armor_translation at ON a.id = at.armor_id AND at.language_code = ?
LEFT JOIN armor_translation at_default ON a.id = at_default.armor_id AND at_default.language_code = 'en_US'
LIMIT :limit OFFSET :offset;

-- Select armor details by id with its translation
selectArmorCardById:
SELECT a.id, a.card_ref, a.reward_id, a.slot_type, a.slot_weight,
       COALESCE(at.name, at_default.name) AS translated_name, COALESCE(at.description, at_default.description) AS translated_description, COALESCE(at.traits, at_default.traits) AS translated_traits
FROM armor a
LEFT JOIN armor_translation at ON a.id = at.armor_id AND at.language_code = ?
LEFT JOIN armor_translation at_default ON a.id = at_default.armor_id AND at_default.language_code = 'en_US'
WHERE a.id = ?;

-- INSERTS

-- Insert into armor table
insertArmor:
INSERT OR REPLACE INTO armor (id, card_ref, reward_id, slot_type, slot_weight, updated)
VALUES (?, ?, ?, ?, ?, "DATETIME('now')");

-- Insert into armor_translation table
insertArmorTranslation:
INSERT OR REPLACE INTO armor_translation (id, armor_id, language_code, name, description, traits, updated)
VALUES (?, ?, ?, ?, ?, ?, "DATETIME('now')");

-- UPDATE

-- Update armor details by id
updateArmor:
UPDATE armor
SET card_ref = :card_ref, reward_id = :reward_id, slot_type = :slot_type, slot_weight = :slot_weight, updated = "DATETIME('now')"
WHERE id = :id;

-- Update armor_translation details by armor_id
updateArmorTranslation:
UPDATE armor_translation
SET name = ?, description = ?, traits = ?, updated = "DATETIME('now')"
WHERE armor_id = ? AND language_code = ?;

-- DELETE

-- Delete armor by id
deleteArmorWithId:
DELETE FROM armor WHERE id = ?;

-- Delete armor_translation by armor_id
deleteArmorTranslationWithId:
DELETE FROM armor_translation WHERE armor_id = ?;

--------------------------------------------- TRIGGERS ---------------------------------------------
CREATE TRIGGER IF NOT EXISTS insert_card_on_armor_creation
    BEFORE INSERT
        ON armor
FOR EACH ROW
BEGIN
    INSERT OR IGNORE INTO card(ref, card_type)
    VALUES (new.card_ref, 'ARMOR');
END;

CREATE TRIGGER IF NOT EXISTS insert_reward_on_armor_creation
    BEFORE INSERT
        ON armor
    WHEN new.reward_id IS NOT NULL
BEGIN
    INSERT OR IGNORE INTO reward(id, card_ref)
    VALUES (new.reward_id, new.card_ref);
END;

